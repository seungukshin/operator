name: ccruntime e2e tests
on:
  workflow_call:
    inputs:
      target-branch:
        required: false
        type: string
        default: ""
      commit-hash:
        required: true
        type: string

permissions:
  contents: read

jobs:
  e2e:
    name: operator tests
    strategy:
      fail-fast: false
      matrix:
        runtimeclass:
          - "kata-qemu"
        instance:
          - "ubuntu-20.04"
          - "ubuntu-22.04"
          - "s390x-large"
          - "tdx"
          - "sev"
          - "sev-snp"
          - "arm64-nvidia-gpu"
        exclude:
          - runtimeclass: "kata-qemu"
            instance: "tdx"
          - runtimeclass: "kata-qemu"
            instance: "sev"
          - runtimeclass: "kata-qemu"
            instance: "sev-snp"
        include:
          - runtimeclass: "kata-qemu-tdx"
            instance: "tdx"
          - runtimeclass: "kata-qemu-sev"
            instance: "sev"
          - runtimeclass: "kata-qemu-snp"
            instance: "sev-snp"
    runs-on: ${{ matrix.instance }}
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4
        with:
          ref: ${{ inputs.commit-hash }}
          fetch-depth: 0

      - name: Rebase atop of the latest target branch
        run: |
          ./tests/git-helper.sh "rebase-atop-of-the-latest-target-branch"
        env:
          TARGET_BRANCH: ${{ inputs.target-branch }}

      - name: Install deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ansible python-is-python3

      - name: Run e2e tests
        timeout-minutes: 45
        run: |
          cd tests/e2e
          export PATH="$PATH:/usr/local/bin"
          args="-u"
          export pre_install_payload_archs="linux/amd64"
          if [ $RUNNING_INSTANCE = "s390x-large" ]; then
            args=""
            export pre_install_payload_archs="linux/s390x"
          elif [ "$RUNNING_INSTANCE" == "ubuntu-20.04" ] || [ "$RUNNING_INSTANCE" == "ubuntu-22.04" ]; then
            # Remove the pre-installed docker/containerd
            sudo apt-get remove docker* containerd* -y
            # Use /mnt to store images
            sudo rm -Rf /var/lib/docker || true
            sudo mkdir /mnt/docker || true
            sudo ln -s /mnt/docker /var/lib/docker || true
          fi
          ./run-local.sh -t -r "${{ matrix.runtimeclass }}" "${args}"
        env:
          RUNNING_INSTANCE: ${{ matrix.instance }}
          GITHUB_TOKEN: ${{ github.token }}
